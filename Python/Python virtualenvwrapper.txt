Introducción
------------
Un entorno virtual de Python es un espacio completamente independiente de otros
entornos virtuales y de los paquetes instalados globalmente en el sistema
http://rukbottoland.com/blog/tutorial-de-python-virtualenvwrapper/

Instalacion
-----------
Fedora
$ sudo dnf install python-virtualenvwrapper

Debian, Ubuntu
$ sudo apt-get install virtualenvwrapper


Configuración de virtualenvwrapper
----------------------------------
Por defecto virtualenvwrapper crea los virtualenvs en la carpeta ~/.virtualenvs.
Sin embargo ese comportamiento se puede cambiar.
Para eso se necesita agregar un par de variables de entorno al archivo ~/.bashrc ó ~/.bash_profile:

export WORKON_HOME=/opt/virtualenvs
export VIRTUALENVWRAPPER_HOOK_DIR=$WORKON_HOME/hooks

La variable WORKON_HOME determina en que directorio se deben crear
los virtualenvs al ejecutar el comando mkvirtualenv.

La segunda variable, VIRTUALENVWRAPPER_HOOK_DIR,
establece el directorio en donde se instalaran algunos scripts muy
útiles que pueden ser usados para automatizar ciertas tareas,
como por ejemplo hacer un commit a un repositorio justo antes de
desactivar el virtualenv.

Por último, se debe agregar una línea al archivo
~/.bashrc ó ~/.bash_profile para especificar en dónde esta ubicado
el ejecutable de virtualenvwrapper:
source /usr/bin/virtualenvwrapper.sh

Si se ha instalado virtualenvwrapper en Debian usando el gestor de paquetes,
es probable que la línea de arriba no funcione. Intente la siguiente:
source /etc/bash_completion.d/virtualenvwrapper

Si las dos líneas anteriores han fallado, es posible que
el archivo virtualenvwrapper.sh se encuentre ubicado
en el directorio /usr/local/bin/:
source /usr/local/bin/virtualenvwrapper.sh

Lo que hace este último comando es procesar el código contenido
en el script virtualenvwrapper.sh dentro del shell o terminal que
estamos utilizando para que los comandos mkvirtualenv, rmvirtualenv
y workon estén disponibles.


Cómo crear un Python virtualenv con virtualenvwrapper
-----------------------------------------------------
Se debe ejecutar el comando mkvirtualenv más el nombre del virtualenv.
Las extensiones se encargan de manera automática de crear el virtualenv
en el directorio correspondiente:

mkvirtualenv [-a project_path] [-i package] [-r requirements_file] [virtualenv options] ENVNAME

The -a option can be used to associate an existing project directory with the new environment.
The -i option can be used to install one or more packages (by repeating the option) after
the environment is created.
The -r option can be used to specify a text file listing packages to be installed.
The argument value is passed to pip -r to be installed.

$ mkvirtualenv mi_proyecto


Cómo eliminar Python virtualenvs con virtualenvwrapper
------------------------------------------------------
Al ejecutar el comando rmvirtualenv más el nombre del virtualenv,
virtualenvwrapper se encarga de borrar el virtualenv con todas los
paquetes que hayamos instalado en él:

$ rmvirtualenv mi_proyecto


Cómo activar un Python virtualenv con virtualenvwrapper
-------------------------------------------------------
Para activar un virtualenv solamente se necesita ejecutar
el comando workon más el nombre del virtualenv en la terminal:

$ workon mi_proyecto
